version: '3.8'

services:
  # Application Next.js
  app:
    build: .
    container_name: inkspot-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://inkspot:inkspot123@postgres:5432/inkspot
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - VAPID_PUBLIC_KEY=${VAPID_PUBLIC_KEY}
      - VAPID_PRIVATE_KEY=${VAPID_PRIVATE_KEY}
    depends_on:
      - postgres
    networks:
      - inkspot-network
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: inkspot-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=inkspot
      - POSTGRES_USER=inkspot
      - POSTGRES_PASSWORD=inkspot123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma:/docker-entrypoint-initdb.d
    networks:
      - inkspot-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: inkspot-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - inkspot-network

  # Redis pour les sessions et cache
  redis:
    image: redis:7-alpine
    container_name: inkspot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - inkspot-network

volumes:
  postgres_data:
  redis_data:

networks:
  inkspot-network:
    driver: bridge