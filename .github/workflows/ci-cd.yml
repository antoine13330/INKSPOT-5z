name: INKSPOT CI/CD Pipeline

# IMPORTANT: Enable code scanning in your repository settings:
# Go to Settings > Security > Code security and analysis > Code scanning
# Enable "GitHub Advanced Security" and "Code scanning"

on:
  push:
    branches: [ main, dev, test/ci-cd-pipeline ]
  pull_request:
    branches: [ main, dev, test/ci-cd-pipeline ]

permissions:
  contents: read
  actions: read
  security-events: write

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inkspot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install --omit=optional --no-audit
          # Installer le bon SWC selon la plateforme
          chmod +x scripts/install-swc.sh
          ./scripts/install-swc.sh || echo "⚠️  SWC installation failed, continuing with build..."
        env:
          NODE_ENV: ci

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install ESLint
        run: npm install --save-dev eslint@latest @eslint/js typescript-eslint

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/inkspot_test" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret-key" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
          echo "POSTGRES_DB=inkspot_test" >> $GITHUB_ENV

      - name: Setup database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          sleep 10
          echo "Creating database schema with Prisma..."
          npx prisma db push --force-reset
          echo "Database setup complete"

      - name: Run linting
        run: npm run lint
        env:
          CI: true

      - name: Run type checking
        run: npm run build --dry-run

      - name: Run tests
        run: npm test --if-present
        env:
          CI: true

      - name: Build application
        run: npm run build
        env:
          CI: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --omit=optional --no-audit
        env:
          NODE_ENV: ci

      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
          scanners: 'vuln,secret,config'

      - name: Run Trivy vulnerability scanner on dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'node_modules'
          format: 'sarif'
          output: 'trivy-deps-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
          scanners: 'vuln'

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

      - name: Upload Trivy dependencies scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-deps-results.sarif'
          category: 'trivy-dependencies'

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test/ci-cd-pipeline')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push WebSocket server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.websocket
          push: true
          tags: ghcr.io/${{ github.repository }}-websocket:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker images for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: ghcr.io/${{ github.repository }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true

      - name: Upload Docker image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-docker-images'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test/ci-cd-pipeline')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "📍 Branch: ${{ github.ref_name }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📅 Timestamp: $(date)"
          
          # Simulate deployment steps
          echo "📦 Building staging environment..."
          echo "🔒 Setting up environment variables..."
          echo "🚀 Starting staging services..."
          echo "✅ Staging deployment completed successfully!"
          
          # Add your actual staging deployment logic here:
          # - kubectl apply -f k8s/staging/
          # - docker-compose -f docker-compose.staging.yml up -d
          # - aws ecs update-service --cluster staging --service app

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "📍 Branch: ${{ github.ref_name }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo "👤 Actor: ${{ github.actor }}"
          echo "📅 Timestamp: $(date)"
          
          # Simulate production deployment steps
          echo "📦 Building production environment..."
          echo "🔒 Setting up production environment variables..."
          echo "🚀 Starting production services..."
          echo "✅ Production deployment completed successfully!"
          
          # Add your actual production deployment logic here:
          # - kubectl apply -f k8s/production/
          # - docker-compose -f docker-compose.prod.yml up -d
          # - aws ecs update-service --cluster production --service app 