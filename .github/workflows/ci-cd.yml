name: INKSPOT CI/CD Pipeline

# =============================================================================
# REQUIRED SETUP - READ BEFORE RUNNING
# =============================================================================
#
# 1. ENABLE CODE SCANNING:
#    Go to Settings > Security > Code security and analysis > Code scanning
#    Enable "GitHub Advanced Security" and "Code scanning"
#
# 2. SET UP CONTAINER REGISTRY PERMISSIONS:
#    - Create Personal Access Token (PAT) with 'write:packages' and 'read:packages' permissions
#    - Add it as secret 'CR_PAT' in Settings > Secrets and variables > Actions
#    - This allows pushing Docker images to ghcr.io
#
# 3. REQUIRED SECRETS (Settings > Secrets and variables > Actions):
#    - CR_PAT: Personal Access Token for Container Registry access
#    - POSTGRES_PASSWORD: Database password (if using external database)
#    - NEXTAUTH_SECRET: NextAuth.js secret key
#    - DATABASE_URL: Database connection string (if using external database)
#
# 4. WORKFLOW FEATURES:
#    - Automatic testing and building
#    - Security scanning with Trivy
#    - Docker image building and pushing
#    - Conditional deployment based on branch
#    - Comprehensive error handling and logging
#
# =============================================================================

on:
  push:
    branches: [ main, dev, test/ci-cd-pipeline ]
  pull_request:
    branches: [ main, dev, test/ci-cd-pipeline ]

permissions:
  contents: read
  actions: read
  security-events: write

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: inkspot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install --omit=optional --no-audit
          # Installer le bon SWC selon la plateforme
          chmod +x scripts/install-swc.sh
          ./scripts/install-swc.sh || echo "‚ö†Ô∏è  SWC installation failed, continuing with build..."
        env:
          NODE_ENV: ci

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install ESLint
        run: npm install --save-dev eslint@latest @eslint/js typescript-eslint

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/inkspot_test" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret-key" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV
          echo "NODE_ENV=test" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
          echo "POSTGRES_DB=inkspot_test" >> $GITHUB_ENV

      - name: Setup database
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          sleep 10
          echo "Creating database schema with Prisma..."
          npx prisma db push --force-reset
          echo "Database setup complete"

      - name: Run linting
        run: npm run lint
        env:
          CI: true

      - name: Run type checking
        run: npm run build --dry-run

      - name: Run tests
        run: npm test --if-present
        env:
          CI: true

      - name: Build application
        run: npm run build
        env:
          CI: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test-and-build
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --omit=optional --no-audit
        env:
          NODE_ENV: ci

      - name: Run Trivy vulnerability scanner on filesystem
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
          scanners: 'vuln,secret,config'
        continue-on-error: true
        id: trivy-fs-scan

      - name: Run Trivy vulnerability scanner on dependencies
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'node_modules'
          format: 'sarif'
          output: 'trivy-deps-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
          scanners: 'vuln'
        continue-on-error: true
        id: trivy-deps-scan

      - name: Check if filesystem scan results exist
        id: check-fs-scan
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "‚úÖ Filesystem SARIF file found: trivy-results.sarif"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Filesystem SARIF file not found: trivy-results.sarif"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if dependencies scan results exist
        id: check-deps-scan
        run: |
          if [ -f "trivy-deps-results.sarif" ]; then
            echo "‚úÖ Dependencies SARIF file found: trivy-deps-results.sarif"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Dependencies SARIF file not found: trivy-deps-results.sarif"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Trivy filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-fs-scan.outputs.exists == 'true'
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'

      - name: Upload Trivy dependencies scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-deps-scan.outputs.exists == 'true'
        with:
          sarif_file: 'trivy-deps-results.sarif'
          category: 'trivy-dependencies'

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test/ci-cd-pipeline')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Verify pnpm installation
        run: |
          echo "üîç Verifying pnpm installation..."
          pnpm --version
          echo "‚úÖ pnpm is ready for Docker build"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}

      - name: Verify Container Registry access
        run: |
          echo "üîç Verifying access to GitHub Container Registry..."
          docker pull hello-world:latest
          echo "‚úÖ Docker access verified"
          echo "üîê Logged in as: ${{ github.actor }}"
          echo "üèóÔ∏è  Repository: ${{ github.repository }}"
          
          # Test pulling from our registry to ensure authentication works
          echo "üîç Testing authentication with our registry..."
          if docker pull ghcr.io/${{ github.repository }}:latest 2>/dev/null; then
            echo "‚úÖ Successfully pulled image from our registry"
          else
            echo "‚ö†Ô∏è  Could not pull image (this is normal if it's the first build)"
            echo "üîç Checking if we can at least authenticate:"
            docker manifest inspect ghcr.io/${{ github.repository }}:latest 2>/dev/null && echo "‚úÖ Authentication successful" || echo "‚ö†Ô∏è  Image not found yet (normal for first build)"
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push main app
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        id: build-main-app

      - name: Build and push WebSocket server
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.websocket
          push: true
          tags: ghcr.io/${{ github.repository }}-websocket:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        id: build-websocket

      - name: Check build status
        run: |
          echo "üîç Checking Docker build status..."
          
          if [ "${{ steps.build-main-app.outcome }}" = "success" ]; then
            echo "‚úÖ Main app build: SUCCESS"
          else
            echo "‚ùå Main app build: FAILED"
          fi
          
          if [ "${{ steps.build-websocket.outcome }}" = "success" ]; then
            echo "‚úÖ WebSocket build: SUCCESS"
          else
            echo "‚ùå WebSocket build: FAILED"
          fi
          
          # Only proceed with verification if both builds succeeded
          if [ "${{ steps.build-main-app.outcome }}" = "success" ] && [ "${{ steps.build-websocket.outcome }}" = "success" ]; then
            echo "üéâ All builds succeeded, proceeding with verification..."
          else
            echo "‚ö†Ô∏è  Some builds failed, skipping verification and scanning..."
            exit 1
          fi
        if: always()

      - name: Verify Docker images exist
        run: |
          echo "üîç Verifying Docker images were built and pushed..."
          
          # Check if main app image exists
          if docker manifest inspect ghcr.io/${{ github.repository }}:latest >/dev/null 2>&1; then
            echo "‚úÖ Main app image exists: ghcr.io/${{ github.repository }}:latest"
          else
            echo "‚ùå Main app image not found: ghcr.io/${{ github.repository }}:latest"
            echo "üîç This might be due to:"
            echo "   - Build failure"
            echo "   - Push failure"
            echo "   - Authentication issues"
            echo "   - Registry access problems"
            exit 1
          fi
          
          # Check if websocket image exists
          if docker manifest inspect ghcr.io/${{ github.repository }}-websocket:${{ github.sha }} >/dev/null 2>&1; then
            echo "‚úÖ WebSocket image exists: ghcr.io/${{ github.repository }}-websocket:${{ github.sha }}"
          else
            echo "‚ùå WebSocket image not found: ghcr.io/${{ github.repository }}-websocket:${{ github.sha }}"
            echo "üîç This might be due to:"
            echo "   - Build failure"
            echo "   - Push failure"
            echo "   - Authentication issues"
            echo "   - Registry access problems"
            exit 1
          fi
          
          echo "üéâ All Docker images verified successfully!"
        continue-on-error: true
        id: verify-images

      - name: Check if images are ready for scanning
        run: |
          if [ "${{ steps.verify-images.outcome }}" = "success" ]; then
            echo "‚úÖ Images verified successfully, proceeding with security scan..."
            echo "ready=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Image verification failed, skipping security scan..."
            echo "ready=false" >> $GITHUB_OUTPUT
          fi
        id: check-images-ready

      - name: Scan Docker images for vulnerabilities
        uses: aquasecurity/trivy-action@master
        if: steps.check-images-ready.outputs.ready == 'true'
        with:
          scan-type: 'image'
          scan-ref: ghcr.io/${{ github.repository }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'
          ignore-unfixed: true
        continue-on-error: true
        id: trivy-scan

      - name: Debug scan results
        if: steps.check-images-ready.outputs.ready == 'true'
        run: |
          echo "üîç Debugging Trivy scan results..."
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          
          if [ -f "trivy-image-results.sarif" ]; then
            echo "‚úÖ SARIF file size: $(wc -c < trivy-image-results.sarif) bytes"
            echo "üìÑ First few lines of SARIF file:"
            head -5 trivy-image-results.sarif
          else
            echo "‚ùå SARIF file not found"
            echo "üîç Checking for any Trivy output files:"
            find . -name "*.sarif" -o -name "trivy-*" 2>/dev/null || echo "No Trivy files found"
          fi
        continue-on-error: true

      - name: Check if scan results exist
        id: check-scan
        run: |
          if [ "${{ steps.check-images-ready.outputs.ready }}" != "true" ]; then
            echo "‚ö†Ô∏è  Scanning was skipped due to image verification failure"
            echo "exists=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [ -f "trivy-image-results.sarif" ]; then
            echo "‚úÖ SARIF file found: trivy-image-results.sarif"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  SARIF file not found: trivy-image-results.sarif"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Upload Docker image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-scan.outputs.exists == 'true'
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-docker-images'

      - name: Workflow summary
        run: |
          echo "üéØ INKSPOT CI/CD Pipeline Summary"
          echo "=================================="
          echo "üì¶ Docker Builds:"
          echo "   Main App: ${{ steps.build-main-app.outcome }}"
          echo "   WebSocket: ${{ steps.build-websocket.outcome }}"
          echo ""
          echo "üîç Image Verification: ${{ steps.verify-images.outcome }}"
          echo "üîí Security Scanning: ${{ steps.trivy-scan.outcome }}"
          echo "üìÑ SARIF Upload: ${{ steps.check-scan.outputs.exists }}"
          echo ""
          if [ "${{ steps.build-main-app.outcome }}" = "success" ] && [ "${{ steps.build-websocket.outcome }}" = "success" ]; then
            echo "‚úÖ All Docker builds completed successfully!"
          else
            echo "‚ùå Some Docker builds failed. Check the logs above for details."
          fi
          
          if [ "${{ steps.verify-images.outcome }}" = "success" ]; then
            echo "‚úÖ Docker images verified and ready for deployment!"
          else
            echo "‚ö†Ô∏è  Docker image verification failed. Images may not be available for scanning or deployment."
          fi
        if: always()

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test/ci-cd-pipeline')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "üìç Branch: ${{ github.ref_name }}"
          echo "üîó Commit: ${{ github.sha }}"
          echo "üë§ Actor: ${{ github.actor }}"
          echo "üìÖ Timestamp: $(date)"
          
          # Simulate deployment steps
          echo "üì¶ Building staging environment..."
          echo "üîí Setting up environment variables..."
          echo "üöÄ Starting staging services..."
          echo "‚úÖ Staging deployment completed successfully!"
          
          # Add your actual staging deployment logic here:
          # - kubectl apply -f k8s/staging/
          # - docker-compose -f docker-compose.staging.yml up -d
          # - aws ecs update-service --cluster staging --service app

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-and-build, security-scan, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "üìç Branch: ${{ github.ref_name }}"
          echo "üîó Commit: ${{ github.sha }}"
          echo "üë§ Actor: ${{ github.actor }}"
          echo "üìÖ Timestamp: $(date)"
          
          # Simulate production deployment steps
          echo "üì¶ Building production environment..."
          echo "üîí Setting up production environment variables..."
          echo "üöÄ Starting production services..."
          echo "‚úÖ Production deployment completed successfully!"
          
          # Add your actual production deployment logic here:
          # - kubectl apply -f k8s/production/
          # - docker-compose -f docker-compose.prod.yml up -d
          # - aws ecs update-service --cluster production --service app 