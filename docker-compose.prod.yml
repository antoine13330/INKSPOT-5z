version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: inkspot_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-inkspot}
      POSTGRES_USER: ${POSTGRES_USER:-inkspot_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-inkspot_user} -d ${POSTGRES_DB:-inkspot}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions (Production)
  redis:
    image: redis:7-alpine
    container_name: inkspot_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Application (Production)
  app:
    image: ${DOCKER_REGISTRY:-ghcr.io}/${IMAGE_NAME:-antoine13330/inkspot-5z}:${TAG:-latest}
    container_name: inkspot_app_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-inkspot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-inkspot}
      - REDIS_URL=redis://redis:6379
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
    ports:
      - "3000:3000"
    volumes:
      - ./public/uploads:/app/public/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WebSocket Server (Production)
  websocket:
    image: ${DOCKER_REGISTRY:-ghcr.io}/${IMAGE_NAME:-antoine13330/inkspot-5z}-websocket:${TAG:-latest}
    container_name: inkspot_websocket_prod
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-inkspot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-inkspot}
      - REDIS_URL=redis://redis:6379
      - WS_PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: inkspot_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - app
      - websocket
    networks:
      - inkspot_network_prod
    restart: unless-stopped

  # Grafana (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: inkspot_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: inkspot_prometheus_prod
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data_prod:/prometheus
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    profiles:
      - monitoring

  # Node Exporter (Production)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: inkspot_node_exporter_prod
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    profiles:
      - monitoring

  # Postgres Exporter (Production)
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: inkspot_postgres_exporter_prod
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-inkspot_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-inkspot}?sslmode=disable"
    networks:
      - inkspot_network_prod
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data_prod:
  redis_data_prod:
  grafana_data_prod:
  prometheus_data_prod:

networks:
  inkspot_network_prod:
    driver: bridge 