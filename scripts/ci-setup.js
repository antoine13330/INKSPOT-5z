#!/usr/bin/env node

/**
 * Script de configuration automatique pour CI/CD
 * G√©n√®re les cl√©s VAPID et configure l'environnement
 * Usage: node scripts/ci-setup.js
 */

const webpush = require('web-push');
const fs = require('fs');
const path = require('path');

console.log('üöÄ Configuration automatique CI/CD...\n');

// V√©rifier si on est en mode CI
const isCI = process.env.CI === 'true' || process.env.GITHUB_ACTIONS === 'true';
const isProduction = process.env.NODE_ENV === 'production';

if (isCI) {
  console.log('‚úÖ Mode CI/CD d√©tect√©');
} else if (isProduction) {
  console.log('‚ö†Ô∏è  Mode production d√©tect√© - v√©rification des cl√©s VAPID');
} else {
  console.log('üîß Mode d√©veloppement d√©tect√©');
}

// G√©n√©rer les cl√©s VAPID si elles n'existent pas
if (!process.env.VAPID_PUBLIC_KEY || !process.env.VAPID_PRIVATE_KEY) {
  console.log('üîë G√©n√©ration des cl√©s VAPID...');
  
  const vapidKeys = webpush.generateVAPIDKeys();
  
  // D√©finir les variables d'environnement
  process.env.VAPID_PUBLIC_KEY = vapidKeys.publicKey;
  process.env.VAPID_PRIVATE_KEY = vapidKeys.privateKey;
  process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY = vapidKeys.publicKey;
  
  console.log('‚úÖ Cl√©s VAPID g√©n√©r√©es et configur√©es');
  
  // En mode CI, cr√©er un fichier .env temporaire
  if (isCI) {
    const envContent = `# Configuration automatique CI/CD
VAPID_PUBLIC_KEY=${vapidKeys.publicKey}
VAPID_PRIVATE_KEY=${vapidKeys.privateKey}
NEXT_PUBLIC_VAPID_PUBLIC_KEY=${vapidKeys.publicKey}
EMAIL_FROM=noreply@inkspot-ci.com
NODE_ENV=production
CI=true
`;
    
    fs.writeFileSync('.env.ci', envContent);
    console.log('üìÅ Fichier .env.ci cr√©√© pour le CI/CD');
  }
} else {
  console.log('‚úÖ Cl√©s VAPID d√©j√† configur√©es');
}

// V√©rifier les autres variables critiques
const requiredVars = [
  'DATABASE_URL',
  'NEXTAUTH_SECRET',
  'NEXTAUTH_URL'
];

const missingVars = requiredVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.log('\n‚ö†Ô∏è  Variables manquantes d√©tect√©es:');
  missingVars.forEach(varName => {
    console.log(`  - ${varName}`);
  });
  
  if (isCI) {
    console.log('\nüîß Configuration des variables par d√©faut pour CI/CD...');
    
    // Variables par d√©faut pour CI/CD
    const defaultVars = {
      'DATABASE_URL': 'postgresql://test:test@localhost:5432/inkspot_test',
      'NEXTAUTH_SECRET': 'ci-secret-key-for-testing-only',
      'NEXTAUTH_URL': 'http://localhost:3000'
    };
    
    missingVars.forEach(varName => {
      if (defaultVars[varName]) {
        process.env[varName] = defaultVars[varName];
        console.log(`  ‚úÖ ${varName} = ${defaultVars[varName]}`);
      }
    });
  } else {
    console.log('\n‚ùå Variables requises manquantes. Arr√™t du script.');
    process.exit(1);
  }
}

// V√©rification finale
console.log('\nüîç V√©rification de la configuration...');
console.log(`  ‚úÖ VAPID_PUBLIC_KEY: ${process.env.VAPID_PUBLIC_KEY ? 'Configur√©' : 'Manquant'}`);
console.log(`  ‚úÖ VAPID_PRIVATE_KEY: ${process.env.VAPID_PRIVATE_KEY ? 'Configur√©' : 'Manquant'}`);
console.log(`  ‚úÖ NEXT_PUBLIC_VAPID_PUBLIC_KEY: ${process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY ? 'Configur√©' : 'Manquant'}`);
console.log(`  ‚úÖ DATABASE_URL: ${process.env.DATABASE_URL ? 'Configur√©' : 'Manquant'}`);
console.log(`  ‚úÖ NEXTAUTH_SECRET: ${process.env.NEXTAUTH_SECRET ? 'Configur√©' : 'Manquant'}`);
console.log(`  ‚úÖ NEXTAUTH_URL: ${process.env.NEXTAUTH_URL ? 'Configur√©' : 'Manquant'}`);

console.log('\nüéâ Configuration CI/CD termin√©e avec succ√®s !');
console.log('üìù Les cl√©s VAPID sont maintenant disponibles pour le build.');

if (isCI) {
  console.log('\nüìã Pour utiliser ces cl√©s dans votre workflow:');
  console.log('1. Les cl√©s sont automatiquement disponibles dans process.env');
  console.log('2. Le fichier .env.ci a √©t√© cr√©√© avec la configuration');
  console.log('3. Le build peut maintenant se lancer sans erreur VAPID');
}
