/*
  Inkspot Technical Manual Generator
  - Produces a .docx manual with:
    - Automatic Table of Contents
    - Times New Roman, 11 pt default
    - Mermaid diagrams as fenced code blocks
    - External images embedded by URL (fallbacks to URL text if fetch fails)
    - Explicit screenshot placeholders
  - Content is derived from the repository structure and key files
*/

const fs = require('fs')
const path = require('path')
const { Document, Packer, Paragraph, HeadingLevel, TextRun, TableOfContents, ImageRun, PageBreak } = require('docx')

// Node 18+ provides global fetch. If unavailable, attempt dynamic import of node-fetch.
async function ensureFetch() {
  if (typeof fetch === 'function') return fetch
  try {
    const mod = await import('node-fetch')
    // node-fetch v3 default export is fetch
    return mod.default
  } catch (e) {
    return null
  }
}

function readTextSafe(filePath) {
  try {
    return fs.readFileSync(filePath, 'utf8')
  } catch (e) {
    return ''
  }
}

function listFilesRecursive(dir) {
  const results = []
  try {
    const items = fs.readdirSync(dir, { withFileTypes: true })
    for (const item of items) {
      const full = path.join(dir, item.name)
      if (item.isDirectory()) {
        results.push(...listFilesRecursive(full))
      } else {
        results.push(full)
      }
    }
  } catch (e) {
    // ignore
  }
  return results
}

function getApiRoutesSummary(apiRoot) {
  const files = listFilesRecursive(apiRoot)
  const routes = []
  for (const file of files) {
    if (file.endsWith('route.ts') || file.endsWith('route.js') || file.endsWith('route.tsx')) {
      const rel = file.replace(/\\/g, '/').split('/app/api/')[1]
      if (rel) {
        const routePath = '/' + rel.replace(/\/route\.(t|j)sx?$/, '')
        routes.push(routePath)
      }
    }
  }
  routes.sort()
  return routes
}

function extractPrismaModels(schemaContent) {
  const models = []
  const lines = schemaContent.split(/\r?\n/)
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i]
    const m = line.match(/^model\s+(\w+)\s+\{/)
    if (m) {
      const modelName = m[1]
      models.push(modelName)
    }
  }
  return models
}

function kvTableParagraphs(title, obj) {
  const paras = []
  paras.push(new Paragraph({
    heading: HeadingLevel.HEADING_3,
    children: [new TextRun({ text: title, bold: true })],
  }))
  const entries = Object.entries(obj || {})
  if (entries.length === 0) {
    paras.push(new Paragraph({ children: [new TextRun({ text: 'N/A' })] }))
    return paras
  }
  for (const [k, v] of entries) {
    paras.push(
      new Paragraph({
        children: [
          new TextRun({ text: `${k}: `, bold: true }),
          new TextRun({ text: typeof v === 'string' ? v : JSON.stringify(v) }),
        ],
      })
    )
  }
  return paras
}

function codeBlock(text, opts = {}) {
  const font = opts.font || 'Courier New'
  const size = opts.size || 20 // ~10pt for code readability
  const lines = (text || '').split('\n')
  const blocks = []
  blocks.push(new Paragraph({ children: [new TextRun({ text: '```mermaid', font, size })] }))
  for (const line of lines) {
    blocks.push(new Paragraph({ children: [new TextRun({ text: line, font, size })] }))
  }
  blocks.push(new Paragraph({ children: [new TextRun({ text: '```', font, size })] }))
  return blocks
}

function monoBlock(text, opts = {}) {
  const font = opts.font || 'Courier New'
  const size = opts.size || 20
  const lines = (text || '').split('\n')
  const blocks = []
  for (const line of lines) {
    blocks.push(new Paragraph({ children: [new TextRun({ text: line, font, size })] }))
  }
  return blocks
}

function textParagraphs(text) {
  return String(text || '')
    .split(/\n{2,}/)
    .flatMap((chunk, idx) => {
      const lines = chunk.split(/\n/)
      const runs = []
      for (let i = 0; i < lines.length; i++) {
        runs.push(new TextRun({ text: lines[i] }))
        if (i < lines.length - 1) {
          runs.push(new TextRun({ text: '\n' }))
        }
      }
      const p = new Paragraph({ children: runs })
      // Insert page break occasionally for structure
      if (idx > 0 && idx % 6 === 0) {
        return [new Paragraph({}), p, new Paragraph({ children: [new PageBreak()] })]
      }
      return [p]
    })
}

function screenPlaceholder(label) {
  return new Paragraph({
    children: [
      new TextRun({ text: 'üìå Screen: ', bold: true }),
      new TextRun({ text: label })
    ]
  })
}

async function imageByUrl(url, width = 520) {
  try {
    const _fetch = await ensureFetch()
    if (!_fetch) throw new Error('fetch unavailable')
    const res = await _fetch(url)
    if (!res.ok) throw new Error(`HTTP ${res.status}`)
    const ab = await res.arrayBuffer()
    const buf = Buffer.from(ab)
    return new ImageRun({ data: buf, transformation: { width } })
  } catch (e) {
    return null
  }
}

async function imageParagraphOrLink(url, width) {
  const img = await imageByUrl(url, width)
  if (img) {
    return new Paragraph({ children: [img] })
  }
  return new Paragraph({ children: [
    new TextRun({ text: 'Image (URL): ', bold: true }),
    new TextRun({ text: url, underline: {} })
  ]})
}

async function build() {
  const root = process.cwd()
  const docsDir = path.join(root, 'docs')
  if (!fs.existsSync(docsDir)) fs.mkdirSync(docsDir)

  const pkgPath = path.join(root, 'package.json')
  const pkg = JSON.parse(readTextSafe(pkgPath) || '{}')
  const readme = readTextSafe(path.join(root, 'README.md'))
  const buildDoc = readTextSafe(path.join(root, 'docs', 'BUILD_AND_DEPLOYMENT.md'))
  const appointmentDoc = readTextSafe(path.join(root, 'docs', 'APPOINTMENT_SYSTEM_COMPLETE.md'))
  const prismaSchemaPath = path.join(root, 'prisma', 'schema.prisma')
  const prismaSchema = readTextSafe(prismaSchemaPath)
  const prismaModels = extractPrismaModels(prismaSchema)
  const apiRoot = path.join(root, 'app', 'api')
  const apiRoutes = getApiRoutesSummary(apiRoot)
  const prometheusYml = readTextSafe(path.join(root, 'monitoring', 'prometheus', 'prometheus.yml'))
  const grafanaOverview = readTextSafe(path.join(root, 'monitoring', 'grafana', 'dashboards', 'inkspot-overview.json'))

  // Narrative-heavy sections to expand textual content significantly
  const introNarrative = [
    'Inkspot est une application destin√©e aux professionnels qui souhaitent pr√©senter leur travail, √©changer avec des clients et g√©rer des rendez-vous avec un parcours de paiement int√©gr√©. L‚Äôobjectif technique est double: offrir une exp√©rience fluide c√¥t√© utilisateur (navigation rapide, interactions en temps r√©el, s√©curit√© par d√©faut) et fournir une plateforme d‚Äôexploitation robuste c√¥t√© op√©rateurs (observabilit√©, d√©ploiements reproductibles, r√©silience).',
    'Le syst√®me est construit sur Next.js (App Router), avec des routes d‚ÄôAPI qui encapsulent toutes les fonctions critiques: authentification, gestion des utilisateurs, messagerie, rendez-vous, paiements Stripe, notifications, et export/visualisation de m√©trriques. Prisma orchestre l‚Äôacc√®s √† PostgreSQL avec un sch√©ma riche en relations (utilisateurs, conversations, messages, rendez-vous, paiements, factures, notifications‚Ä¶). L‚Äô√©cosyst√®me comprend Redis (cache et coordination l√©g√®re), AWS S3 pour le stockage d‚Äôobjets et un reverse proxy Nginx en frontal pour la terminaison TLS, la mont√©e en charge horizontale et la gestion des websockets.',
    'Du point de vue de la s√©curit√©, Inkspot applique un middleware sp√©cialis√© (limitation de d√©bit, assainissement et en-t√™tes de protection) et une authentification via NextAuth (JWT) avec possibilit√© d‚ÄôOAuth (Google). Les communications sensibles sont chiffr√©es en transit (HTTPS), et le mod√®le de donn√©es est con√ßu pour minimiser les surfaces d‚Äôattaque (ex: pas d‚Äôacc√®s direct au stockage d‚Äôobjets, politique de permissions c√¥t√© API).',
    'C√¥t√© exploitation, une route "/api/metrics" expose des indicateurs m√©tiers et techniques en format Prometheus. Un stack Prometheus + Grafana r√©cup√®re ces m√©triques (r√©cup√©rations applicatives, exporteurs syst√®me et base de donn√©es) afin d‚Äôalimenter des tableaux de bord et des alertes. Le tout est pr√©vu pour tourner localement (Docker Compose dev) et en production (Docker Compose prod), en conservant des principes identiques: d√©claratif, tra√ßable et observable. Pour les d√©tails exhaustifs et extraits de configuration, voir les annexes D, E et F.'
  ].join('\n\n')

  const stackNarrative = [
    'C√¥t√© d√©veloppement, l‚Äôenvironnement recommand√© repose sur Node.js 18+, npm/pnpm, Prisma (CLI) et Docker Desktop pour simuler les services d√©pendants (PostgreSQL, Redis, Prometheus, Grafana, MailHog). Les scripts npm permettent de lancer le serveur en mode d√©veloppement, d‚Äôex√©cuter les tests, de pousser le sch√©ma Prisma et de peupler la base. La convention est de regrouper les routes API sous "app/api/*" et de centraliser les services horizontaux (Stripe, monitoring, stockage) dans "lib/*".',
    'En production, l‚Äôapplication est conteneuris√©e. Un reverse proxy Nginx re√ßoit le trafic, g√®re TLS et relaie vers l‚Äôapplication (port 3000) et le service WebSocket (port 3001). Les variables d‚Äôenvironnement (ex: NEXTAUTH_SECRET, cl√©s Stripe, identifiants SMTP, configuration S3) sont inject√©es c√¥t√© conteneur. Les volumes assurent la persistance (ex: uploads) et les d√©pendances (PostgreSQL, Redis) tournent en services d√©di√©s. Pour des raisons d‚Äôobservabilit√©, l‚Äôapplication expose /api/metrics; les exporteurs syst√®me (Node Exporter) et base (Postgres Exporter) compl√®tent la vue d‚Äôensemble.',
    'Distinctions entre environnements: en local, priorit√© √† la rapidit√© (hot reload, data de test, services dock√©ris√©s). En staging, on se rapproche de la prod (env vars r√©alistes, builds optimis√©s) pour v√©rifier les parcours complets. En prod, le focus est la s√©curit√©, l‚Äôisolation et l‚Äô√©lasticit√©: secrets g√©r√©s par l‚Äôenvironnement, reverse proxy durci, monitoring actif et proc√©dure de rollback disponible. Les √©carts de configuration sont explicit√©s dans la section Build & D√©ploiement et illustr√©s en Annexe D.'
  ].join('\n\n')

  const dependenciesNarrative = [
    'La gestion des d√©pendances se fait via npm (lockfile), avec un soin particulier apport√© aux biblioth√®ques critiques: next, react, prisma, next-auth, stripe, @aws-sdk. Les mises √† jour suivent le SemVer. Une politique pragmatique est recommand√©e: s√©curit√©s et correctifs en priorit√© (patch), nouvelles fonctionnalit√©s par opportunit√© (minor), et upgrades majeurs (major) soigneusement planifi√©s (tests E2E, canary, rollback).',
    'Pour √©viter la stagnation, ex√©cuter r√©guli√®rement un "npm outdated" et qualifier l‚Äôimpact sur l‚Äôapplication (breaking changes connus, notes de versions). Les d√©pendances transverses (UI, charting, √©tats) doivent √™tre stabilis√©es avant d‚Äôintroduire d‚Äôautres briques. En particulier, Stripe, Prisma et NextAuth doivent rester proches de versions support√©es, car elles structurent les flux de paiement, de donn√©es et d‚Äôacc√®s.',
    'Les d√©pendances de d√©veloppement (ESLint, TypeScript, Jest/Playwright) garantissent qualit√© et coh√©rence. Un budget de maintenance r√©gulier est n√©cessaire pour maintenir l‚Äôoutillage (linters, types) et conserver un feedback rapide pendant le cycle de dev. Les sections Maintenance/√âvolution et l‚ÄôAnnexe E proposent des checklists concr√®tes.'
  ].join('\n\n')

  const monitoringNarrative = [
    'L‚Äôobservabilit√© repose sur trois piliers: m√©triques, logs et (optionnellement) traces. Les m√©triques sont expos√©es en texte (Prometheus exposition format) par /api/metrics: compteurs m√©tiers (utilisateurs, posts, r√©servations, paiements), indicateurs de performance (temps de r√©ponse), et sant√© (m√©moire, uptime, connectivit√© DB/Redis). Ces m√©triques alimentent Prometheus qui conserve des s√©ries temporelles interrogeables par Grafana.',
    'C√¥t√© logs, on recommande PM2 pour capturer les journaux de l‚Äôapplication en production, et la journalisation Nginx c√¥t√© reverse proxy. Pour isoler et r√©soudre des incidents, le couplage des m√©triques (alerte) et des logs (contexte) est d√©terminant. La mise en place de panels Grafana (disponibles dans "monitoring/grafana") aide √† visualiser disponibilit√©, charge, latence et erreurs, et √† rep√©rer les r√©gressions.',
    'Pour l‚Äôalerte, privil√©gier des seuils simples au d√©but (availability, taux d‚Äôerreur, latence P95/P99) puis affiner par composant (DB, WebSocket, Webhooks Stripe). L‚Äôobjectif est d‚Äôobtenir des alertes utiles (actionnables) sans bruit. Les repr√©sentations Mermaid de cette section illustrent le flux logique (d√©tection ‚Üí notification ‚Üí intervention). Les d√©tails de configuration sont fournis en Annexe D.'
  ].join('\n\n')

  const anomaliesNarrative = [
    'La gestion d‚Äôincident suit un cycle standard: d√©tection ‚Üí triage ‚Üí diagnostic ‚Üí rem√©diation ‚Üí post-mortem. Le triage distingue rapidement l‚Äôimpact (client vs interne), l‚Äôurgence (SLA, production vs staging) et le p√©rim√®tre (paiements, auth, messagerie, rendez-vous, uploads). Chaque incident document√© doit aboutir √† des mesures concr√®tes: correctif, test d‚Äôint√©gration, ou am√©lioration d‚Äôobservabilit√©.',
    'Un exemple typique: √©chec du webhook Stripe. Sympt√¥mes: paiements en "pending" malgr√© un succ√®s c√¥t√© Stripe. Diagnostic: signature manquante, latence r√©seau ou parsing JSON. Rem√©diation: v√©rifier la variable STRIPE_WEBHOOK_SECRET, logs de /api/stripe/webhook, activer une alerte sp√©cifique, et ajouter un test de non-r√©gression (simulant l‚Äô√©v√©nement). Post-mortem: checklist de d√©ploiement, alerte d√©di√©e, documentation op√©rateur.',
    'Pour les incidents de performance, s‚Äôappuyer sur les m√©triques P95/P99, la saturation DB (connections) et le monitoring des erreurs 5xx. Les arbres de d√©cision fournis aident √† garder un raisonnement simple: est-ce une panne externe (Stripe, S3), une contrainte interne (DB/Redis), ou une r√©gression applicative? Voir Annexe E pour des proc√©dures et scripts de v√©rification.'
  ].join('\n\n')

  const maintenanceNarrative = [
    'La maintenance r√©guli√®re comprend: mises √† jour de s√©curit√©, rotation des secrets, nettoyage des logs, v√©rification des sauvegardes, r√©indexation ou migrations DB planifi√©es, et calibration des limites (rate limit, tailles d‚Äôupload). C√¥t√© front, il s‚Äôagit de maintenir la coh√©rence UI et d‚Äô√©viter l‚Äôentropie (tokens de design, composants partag√©s).',
    'La mont√©e en charge s‚Äôenvisage horizontalement (plusieurs instances derri√®re Nginx); les √©tats brefs (sessions, queues l√©g√®res) sont externalis√©s (Redis), et les uploads vont sur S3. La base de donn√©es demeure le point de v√©rit√©, et les migrations doivent √™tre atomiques et r√©versibles. L‚ÄôAnnexe D r√©capitule les artefacts de d√©ploiement; l‚ÄôAnnexe E liste les checklists; l‚ÄôAnnexe F pr√©cise les captures d‚Äô√©cran √† produire pour un runbook visuel.',
    '√âvolutions futures: rationaliser le temps r√©el (pattern pub/sub), enrichir la t√©l√©m√©trie (business KPIs), formaliser un SLA par surface (auth, paiement, messagerie), et automatiser plus loin le CI/CD (tests de charge, smoke tests post-d√©ploiement). La roadmap Mermaid illustre un s√©quencement r√©aliste et progressif.'
  ].join('\n\n')

  const ticketingNarrative = [
    'La gestion des demandes client et des tickets d‚Äôincident passe par un tableau Kanban (Jira, GitHub Issues). Chaque ticket doit inclure: contexte, pas de reproduction, impact utilisateur, hypoth√®se, plan de test, crit√®res d‚Äôacceptation. Le flux standard: cr√©ation ‚Üí tri ‚Üí affectation ‚Üí d√©veloppement ‚Üí QA ‚Üí validation ‚Üí mise en production ‚Üí suivi post-release.',
    'C√¥t√© communication, un accus√© r√©ception rapide clarifie la priorit√© et l‚ÄôETA; une mise √† jour r√©guli√®re r√©duit l‚Äôincertitude pour le client. Les tickets techniques (dette, migrations, refactoring) sont planifi√©s pour √©viter l‚Äôeffet tunnel. L‚ÄôAnnexe F propose une liste de captures d‚Äô√©cran pour documenter les parcours cl√©s; l‚ÄôAnnexe G fournit un glossaire afin d‚Äôaligner les termes.'
  ].join('\n\n')

  const conclusionNarrative = [
    'Inkspot combine une base technique moderne (Next.js, Prisma, PostgreSQL) et des int√©grations critiques (Stripe, S3), le tout encadr√© par une s√©curit√© d‚ÄôAPI et une observabilit√© de terrain (Prometheus/Grafana). Pour op√©rer au quotidien et faire √©voluer la plateforme sereinement, deux principes guident la suite: visibilit√© (mesurer pour comprendre) et simplicit√© (privil√©gier des m√©canismes clairs et auditables).',
    'Les annexes rassemblent les d√©tails op√©rationnels et techniques. Dans le corps du manuel, nous privil√©gions une narration orient√©e usage et exploitation: d√©marrer vite, diagnostiquer ais√©ment, d√©ployer avec confiance. Les sections peuvent √™tre lues ind√©pendamment; le sommaire vous permettra d‚Äôaller directement au sujet utile.'
  ].join('\n\n')

  const commandsCheatsheet = [
    'Commandes utiles (Windows, macOS, Linux) ‚Äî Administration, d√©ploiement et diagnostic:',
    '',
    '1) Environnements & variables:',
    '  Windows PowerShell:',
    '    $env:NEXTAUTH_URL',
    '    [System.Environment]::GetEnvironmentVariable("NEXTAUTH_URL","Machine")',
    '    Get-ChildItem Env: | Sort-Object Name',
    '    Get-Content .env.local',
    '    setx NEXTAUTH_SECRET "<valeur>"   # Persiste pour nouvelles sessions',
    '  macOS/Linux (bash/zsh):',
    '    printenv NEXTAUTH_URL',
    '    env | sort',
    '    grep -v "^#" .env.local | xargs -L1 echo',
    '    export NEXTAUTH_SECRET=$(openssl rand -hex 32)',
    '  Node (server-side):',
    '    node -e "console.log(process.env.NEXTAUTH_URL)"',
    '  Next.js (client):',
    '    NEXT_PUBLIC_* seulement est accessible c√¥t√© client (ne jamais exposer de secret).',
    '',
    '2) G√©n√©rer des secrets:',
    '  macOS/Linux:',
    '    openssl rand -hex 32',
    '    uuidgen',
    '    python3 -c "import secrets; print(secrets.token_urlsafe(32))"',
    '  Windows PowerShell:',
    '    [guid]::NewGuid()',
    '    [Convert]::ToBase64String((1..32 | ForEach-Object {Get-Random -Max 256}))',
    '',
    '3) Git & r√©seau:',
    '  git status && git log --oneline -n 10',
    '  Windows:  netstat -ano | findstr :3000',
    '  macOS:    lsof -i :3000',
    '  Linux:    ss -ltnp | grep 3000',
    '',
    '4) Node/Next.js:',
    '  npm run dev',
    '  npm run build && npm start',
    '  npm run type-check && npm run lint',
    '',
    '5) Prisma & PostgreSQL:',
    '  npx prisma db push',
    '  npx prisma db seed',
    '  npx prisma studio',
    '  psql "postgresql://user:pass@localhost:5432/inkspot" -c "\\dt"',
    '  pg_dump -h localhost -U user -d inkspot > backup.sql',
    '  psql -h localhost -U user -d inkspot < backup.sql',
    '',
    '6) Redis:',
    '  redis-cli -a <password> ping',
    '  redis-cli -a <password> info',
    '  redis-cli -a <password> keys "inkspot:*" | head',
    '',
    '7) Docker Compose (dev/prod):',
    '  docker compose -f docker-compose-dev.yml up -d',
    '  docker compose -f docker-compose-dev.yml ps',
    '  docker compose -f docker-compose-dev.yml logs -f postgres',
    '  docker compose -f docker-compose.prod.yml up -d',
    '  docker compose -f docker-compose.prod.yml exec app sh',
    '  docker compose -f docker-compose.prod.yml restart nginx',
    '',
    '8) Nginx (sur serveur):',
    '  nginx -T   # afficher la config effective',
    '  nginx -s reload',
    '  tail -f /var/log/nginx/error.log',
    '',
    '9) Stripe CLI (tests):',
    '  stripe login',
    '  stripe listen --forward-to localhost:3000/api/stripe/webhook',
    '  stripe trigger payment_intent.succeeded',
    '',
    '10) Health & Monitoring:',
    '  curl -i http://localhost:3000/api/health',
    '  curl -s http://localhost:3000/api/metrics | head -n 50',
    '  open http://localhost:9090   # Prometheus (macOS) | xdg-open (Linux)',
    '  open http://localhost:3001   # Grafana (macOS) | xdg-open (Linux)'
  ].join('\n')

  // Compose a much more verbose Build & Deployment guide with concrete steps by OS and environment
  const detailedBuild = [
    'Ce chapitre fournit une proc√©dure pas-√†-pas claire, avec explications simples, pour lancer Inkspot en local, puis le d√©ployer en production. Les commandes sont donn√©es pour Windows (PowerShell), macOS et Linux. Pour les commandes Git, utilisez de pr√©f√©rence Git Bash [[Pr√©f√©rence utilisateur]].',
    '',
    '1) Pr√©-requis',
    '',
    '- Windows 10/11: installez Node.js 18+ (node -v), Docker Desktop, et (optionnel) WSL2 pour de meilleures performances Docker.',
    '- macOS: installez Homebrew, puis: brew install node; installez Docker Desktop for Mac.',
    '- Linux (Debian/Ubuntu): sudo apt-get update && sudo apt-get install -y curl build-essential; installez Node 18 LTS via nvm; installez Docker Engine + docker compose.',
    '',
    '2) Cloner le projet et installer les d√©pendances',
    '',
    'Windows PowerShell:',
    '  git clone <repo> && cd INKSPOT-5z',
    '  npm install',
    '',
    'macOS/Linux:',
    '  git clone <repo> && cd INKSPOT-5z',
    '  npm install',
    '',
    '3) Configurer les variables d‚Äôenvironnement (.env.local en d√©veloppement)',
    '',
    'Cr√©ez un fichier .env.local √† la racine et renseignez au minimum:',
    '  DATABASE_URL=postgresql://postgres:password@localhost:5432/inkspot',
    '  NEXTAUTH_SECRET=une_cha√Æne_al√©atoire_longue',
    '  NEXTAUTH_URL=http://localhost:3000',
    '  NEXT_PUBLIC_APP_URL=http://localhost:3000',
    '  GOOGLE_CLIENT_ID=...',
    '  GOOGLE_CLIENT_SECRET=...',
    '  STRIPE_SECRET_KEY=sk_live_ou_test',
    '  STRIPE_PUBLISHABLE_KEY=pk_live_ou_test',
    '  STRIPE_WEBHOOK_SECRET=whsec_...',
    '  AWS_ACCESS_KEY_ID=...',
    '  AWS_SECRET_ACCESS_KEY=...',
    '  AWS_REGION=eu-west-1',
    '  AWS_S3_BUCKET=inkspot-assets',
    '  SMTP_HOST=smtp.votre_domaine',
    '  SMTP_PORT=587',
    '  SMTP_USER=...',
    '  SMTP_PASS=...',
    '  REDIS_URL=redis://localhost:6379',
    '',
    '4) Services locaux (PostgreSQL, Redis, Prometheus, Grafana) via Docker (optionnel mais recommand√©)',
    '',
    'Le fichier docker-compose-dev.yml lance:',
    '  - Postgres (port 5432)',
    '  - Redis (port 6379)',
    '  - MailHog (port 8025) pour tester l‚Äôemail',
    '  - Prometheus (port 9090) et Grafana (port 3001) pour le monitoring',
    '',
    'Commande unique:',
    '  docker compose -f docker-compose-dev.yml up -d',
    '',
    '5) Pr√©parer la base de donn√©es avec Prisma',
    '',
    '  npx prisma db push   # cr√©e les tables √† partir de prisma/schema.prisma',
    '  npx prisma db seed   # remplit des donn√©es de d√©mo si disponible',
    '',
    '6) Lancer l‚Äôapplication en d√©veloppement',
    '',
    '  npm run dev',
    '  Ouvrez http://localhost:3000',
    '',
    'V√©rifications utiles:',
    '  - http://localhost:3000/api/health doit r√©pondre OK',
    '  - http://localhost:3000/api/metrics expose des m√©triques Prometheus (utilis√©es par Grafana)',
    '  - http://localhost:9090 (Prometheus) et http://localhost:3001 (Grafana) si lanc√©s via compose',
    '',
    '7) Build de production local (sans Docker)',
    '',
    '  npm run build',
    '  npm start',
    '  # Le serveur √©coute sur le port 3000 par d√©faut',
    '',
    '8) D√©ploiement production avec Docker Compose',
    '',
    'Le fichier docker-compose.prod.yml d√©finit les services:',
    '  - app (Next.js) et websocket (port 3001) avec healthchecks',
    '  - postgres, redis',
    '  - nginx (reverse proxy) avec TLS',
    '  - grafana, prometheus (profil monitoring)',
    '',
    '√âtapes:',
    '  a. Cr√©ez un fichier .env (ou .env.prod) avec toutes les variables (voir section 3).',
    '  b. Fournissez des certificats TLS dans nginx/ssl (cert.pem, key.pem). Pour Let‚Äôs Encrypt, utilisez certbot sur le serveur.',
    '  c. D√©marrez: docker compose -f docker-compose.prod.yml up -d',
    '  d. V√©rifiez la sant√©: docker compose -f docker-compose.prod.yml ps',
    '  e. Consultez les logs: docker compose -f docker-compose.prod.yml logs -f app nginx',
    '',
    '9) Nginx ‚Äì ce que fait la configuration',
    '',
    '  - Redirige HTTP vers HTTPS',
    '  - Proxy / vers app:3000',
    '  - Proxy /socket.io/ vers websocket:3001 (temps r√©el)',
    '  - Applique du rate limiting sur /api et /api/auth',
    '  - Expose en interne Grafana (3002) et Prometheus (9090)',
    '',
    '10) WebSocket ‚Äì v√©rification',
    '',
    '  - Assurez-vous que le service websocket √©coute sur 3001',
    '  - Sous Nginx, /socket.io/ doit √©tablir une connexion WebSocket (Upgrade)',
    '',
    '11) Monitoring ‚Äì v√©rification',
    '',
    '  - curl http://<votre-domaine>/api/metrics renvoie des m√©triques custom (ex: inkspot_user_total)',
    '  - Prometheus scrape /api/metrics (voir monitoring/prometheus/prometheus.yml)',
    '  - Grafana lit Prometheus et affiche les dashboards fournis',
    '',
    '12) D√©pannage (les plus fr√©quents)',
    '',
    '  - Erreur DB: v√©rifiez DATABASE_URL, r√©seau Docker, et que prisma db push a bien tourn√©.',
    '  - Erreur Stripe: cl√©s invalides ou webhook_secret manquant; reconfigurez et red√©marrez.',
    '  - 502 via Nginx: v√©rifiez que le conteneur app est healthy et √©coute 3000; examinez logs Nginx.',
    '  - WebSocket ne se connecte pas: port 3001 expos√©? Bloc /socket.io/ pr√©sent et Upgrade activ√©?',
    '  - Images/Uploads: configurez AWS S3 (cl√©, secret, bucket) et v√©rifiez les permissions.',
  ].join('\n')

  const doc = new Document({
    styles: {
      default: {
        document: {
          run: {
            font: 'Times New Roman',
            size: 22,
          },
          paragraph: {
            spacing: { after: 120 },
          },
        },
      },
      paragraphStyles: [
        {
          id: 'CodeBlock',
          name: 'CodeBlock',
          basedOn: 'Normal',
          run: { font: 'Courier New', size: 20 },
          paragraph: { spacing: { before: 80, after: 80 } },
        },
      ],
    },
    sections: [
      {
        children: [
          new Paragraph({
            heading: HeadingLevel.TITLE,
            children: [new TextRun({ text: 'Inkspot ‚Äì Manuel d‚Äôutilisation technique', bold: true })],
          }),
          new Paragraph({ children: [new TextRun({ text: 'Version: 1.0' })] }),
          new Paragraph({ children: [new TextRun({ text: 'G√©n√©r√© automatiquement √† partir du code source.' })] }),
          new Paragraph({ children: [new PageBreak()] }),

          new Paragraph({
            heading: HeadingLevel.HEADING_1,
            children: [new TextRun({ text: 'Sommaire', bold: true })],
          }),
          new TableOfContents('Table des mati√®res', {
            hyperlink: true,
            headingStyleRange: '1-5',
          }),
          new Paragraph({ children: [new PageBreak()] }),

          // 1. Introduction
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '1. Introduction', bold: true })] }),
          ...textParagraphs(
            'Pr√©sentation technique d‚ÄôInkspot.\n\n' + introNarrative
          ),
          new Paragraph({ heading: HeadingLevel.HEADING_2, children: [new TextRun({ text: 'Architecture globale de l‚Äôapplication', bold: true })] }),
          ...textParagraphs('Voir Diagramme D1 ‚Äî Architecture globale (Annexe H). ü¶ä Ajoutez un signet Word nomm√© D1 sur le diagramme en Annexe H et cr√©ez un lien depuis cette section si souhait√©.'),
          await imageParagraphOrLink('https://miro.medium.com/v2/resize:fit:1400/1*WcXghWz8nRwl0FdrVv5f9g.png', 520),
          screenPlaceholder('Dashboard principal de l‚Äôapp en local (http://localhost:3000) ‚Äî page d‚Äôaccueil ou tableau de bord PRO'),
          new Paragraph({ children: [new PageBreak()] }),

          // 2. Stack Technique
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '2. Stack Technique', bold: true })] }),
          new Paragraph({ heading: HeadingLevel.HEADING_2, children: [new TextRun({ text: 'Stack locale (frameworks, libs, environnement dev)', bold: true })] }),
          ...kvTableParagraphs('Frameworks principaux', {
            Next: pkg?.dependencies?.next || 'N/A',
            React: pkg?.dependencies?.react || 'N/A',
            TypeScript: pkg?.devDependencies?.typescript || 'N/A',
            Prisma: pkg?.devDependencies?.prisma || pkg?.dependencies?.['@prisma/client'] || 'N/A',
          }),
          ...kvTableParagraphs('Librairies cl√©s', {
            'next-auth': pkg?.dependencies?.['next-auth'] || 'N/A',
            stripe: pkg?.dependencies?.stripe || 'N/A',
            '@stripe/stripe-js': pkg?.dependencies?.['@stripe/stripe-js'] || 'N/A',
            '@aws-sdk/client-s3': pkg?.dependencies?.['@aws-sdk/client-s3'] || 'N/A',
            'web-push': pkg?.dependencies?.['web-push'] || 'N/A',
            zustand: pkg?.dependencies?.zustand || 'N/A',
          }),
          ...textParagraphs(stackNarrative),
          ...codeBlock(
            'graph LR\n' +
            '  Dev[Dev Local] -- push --> Repo[Git]\n' +
            '  Repo -- CI --> Build[CI Build + Tests]\n' +
            '  Build -- deploy --> Prod[Production]\n' +
            '  Prod -->|/api/metrics| Prometheus --> Grafana'
          ),
          ...codeBlock(
            'flowchart TD\n' +
            '  Commit --> CI[CI/CD Pipeline]\n' +
            '  CI --> Test[Unit/E2E]\n' +
            '  Test --> Build[Next build]\n' +
            '  Build --> Deploy[Deploy Docker/Vercel]\n' +
            '  Deploy --> Notify[Notifications]'
          ),
          ...codeBlock(
            'graph TD\n' +
            '  User --> LB[Reverse Proxy/Nginx]\n' +
            '  LB --> Next[Next.js Runtime]\n' +
            '  Next --> DB[(PostgreSQL)]\n' +
            '  Next --> S3[AWS S3]\n' +
            '  Next --> Stripe[Stripe]\n' +
            '  Next --> Metrics[/api/metrics/]'
          ),
          ...textParagraphs('ü¶ä Ins√©rez en Annexe F une capture du pipeline CI/CD (ex: GitHub Actions/Vercel) et une capture de la base de donn√©es (Prisma Studio/pgAdmin). Cr√©ez des signets F1 (pipeline) et F2 (DB) et ajoutez des liens depuis cette section si n√©cessaire.'),
          new Paragraph({ children: [new PageBreak()] }),

          // 3. D√©pendances
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '3. D√©pendances', bold: true })] }),
          ...textParagraphs(dependenciesNarrative),
          ...textParagraphs('ü¶ä Ne pas coller ici le package.json. √Ä la place, ajoutez en Annexe C une capture d‚Äô√©cran des sections scripts et d√©pendances de votre package.json (signets C1 pour scripts, C2 pour deps).'),
          ...codeBlock(
            'graph TD\n' +
            '  Next --> React\n' +
            '  Next --> NextAuth\n' +
            '  API --> Prisma\n' +
            '  API --> Stripe\n' +
            '  Uploads --> AWS_S3'
          ),
          await imageParagraphOrLink('https://raw.githubusercontent.com/semver/semver.org/master/static/img/semver.png', 480),
          screenPlaceholder('R√©sultat de la commande: npm outdated'),
          screenPlaceholder('Extrait du package.json (d√©pendances et scripts)'),
          new Paragraph({ children: [new PageBreak()] }),

          // 4. Monitoring
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '4. Monitoring', bold: true })] }),
          ...textParagraphs(monitoringNarrative),
          new Paragraph({ heading: HeadingLevel.HEADING_2, children: [new TextRun({ text: 'Workflow Monitoring', bold: true })] }),
          ...codeBlock(
            'sequenceDiagram\n' +
            '  participant App as Inkspot API\n' +
            '  participant Prom as Prometheus\n' +
            '  participant Graf as Grafana\n' +
            '  App->>Prom: Expose /api/metrics\n' +
            '  Prom->>Graf: Alimente panneaux\n' +
            '  Graf-->>Ops: Alertes visuelles/notifications'
          ),
          ...codeBlock(
            'graph TD\n' +
            '  Error[Erreur App] --> Collect[Logs/Metrics]\n' +
            '  Collect --> Detect[D√©tection seuils]\n' +
            '  Detect --> Notify[Notification Slack/Email]\n' +
            '  Notify --> Respond[Intervention]' 
          ),
          ...textParagraphs('ü¶ä En Annexe F, ajoutez deux captures: Grafana (signet F3) et logs temps r√©el (signet F4). Reliez ces captures √† cette section si n√©cessaire.'),
          ...textParagraphs('ü¶ä Cette section renvoie vers l‚ÄôAnnexe D (D2). Placez un signet D2 au bloc Prometheus et cr√©ez un lien depuis ici si souhait√©.'),
          new Paragraph({ children: [new PageBreak()] }),

          // 5. Traitement des anomalies
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '5. Traitement des anomalies', bold: true })] }),
          ...textParagraphs(anomaliesNarrative),
          ...codeBlock(
            'flowchart LR\n' +
            '  Detect --> Triage --> Fix --> PostMortem\n' +
            '  Triage -->|Impact √©lev√©| Critical\n' +
            '  Triage -->|Impact faible| Minor'
          ),
          ...codeBlock(
            'graph TD\n' +
            '  Start --> IsCritical{Impact/SLA Critique ?}\n' +
            '  IsCritical -- Oui --> Escalate[Escalade N2/N3]\n' +
            '  IsCritical -- Non --> NormalFlow[R√©solution standard]\n' +
            '  Escalate --> RCA[Analyse cause racine]\n' +
            '  NormalFlow --> RCA\n' +
            '  RCA --> Lessons[Am√©liorations]' 
          ),
          ...textParagraphs('ü¶ä En Annexe F, ajoutez une capture d‚Äôun ticket d‚Äôincident r√©solu (signet F5) avec statut, timeline et r√©sum√© de r√©solution.'),
          new Paragraph({ children: [new PageBreak()] }),

          // 6. Maintenance et √©volution
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '6. Maintenance et √©volution', bold: true })] }),
          ...textParagraphs(maintenanceNarrative),
          ...codeBlock(
            'gantt\n' +
            '  title Plan de maintenance et releases\n' +
            '  dateFormat  YYYY-MM-DD\n' +
            '  section Maintenance\n' +
            '  Mises √† jour deps     :active,  des1, 2025-01-01, 7d\n' +
            '  Migration DB          :         des2, 2025-01-10, 5d\n' +
            '  section Releases\n' +
            '  v1.1                  :         rel1, 2025-01-20, 3d\n' +
            '  v1.2                  :         rel2, 2025-02-05, 3d'
          ),
          ...codeBlock(
            'graph TD\n' +
            '  Roadmap[Roadmap technique]\n' +
            '  Roadmap --> Perf[Optimisations perfs]\n' +
            '  Roadmap --> Obs[Observabilit√© avanc√©e]\n' +
            '  Roadmap --> Features[Nouvelles fonctionnalit√©s]'
          ),
          ...textParagraphs('ü¶ä En Annexe F, ins√©rez: un planning de maintenance (Trello/Jira) ‚Äî signet F6, et un plan de migration DB (sch√©ma, √©tapes) ‚Äî signet F7.'),
          new Paragraph({ heading: HeadingLevel.HEADING_2, children: [new TextRun({ text: 'Build & D√©ploiement ‚Äî Guide pas-√†-pas (d√©taill√©)', bold: true })] }),
          ...textParagraphs(detailedBuild),
          new Paragraph({ heading: HeadingLevel.HEADING_3, children: [new TextRun({ text: 'Extraits utiles', bold: true })] }),
          ...textParagraphs('Annexe D (signets D1 √† D4):\n - D1: Diagramme architecture globale (Mermaid)\n - D2: Prometheus scrape\n - D3: Nginx (proxy, WebSocket)\n - D4: Docker Compose prod (services applicatifs)'),
          new Paragraph({ children: [new PageBreak()] }),

          // 7. Ticketing et report client
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '7. Ticketing et report client', bold: true })] }),
          ...textParagraphs(ticketingNarrative),
          ...codeBlock(
            'flowchart LR\n' +
            '  Client --> Support --> Ticket[Ticketing]\n' +
            '  Ticket --> Dev[Dev] --> QA[QA] --> Done[Valid√©]' 
          ),
          ...codeBlock(
            'sequenceDiagram\n' +
            '  participant U as Client\n' +
            '  participant S as Support\n' +
            '  participant D as Dev\n' +
            '  U->>S: Ouvre un ticket\n' +
            '  S->>D: Tri et attribution\n' +
            '  D-->>U: Fix livr√© & feedback'
          ),
          await imageParagraphOrLink('https://www.atlassian.com/dam/jcr:7ac79c1f-ea54-4c8e-860d-b6c3c48fc4e8/Service-Level-Agreements-SLAs-hero.svg', 520),
          screenPlaceholder('Tableau Kanban des tickets'),
          screenPlaceholder('Ticket prioris√© avec checklist'),
          new Paragraph({ children: [new PageBreak()] }),

          // 8. Conclusion
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: '8. Conclusion', bold: true })] }),
          ...textParagraphs(conclusionNarrative),
          ...codeBlock(
            'graph TD\n' +
            '  Stack[Stack] --> Monitoring[Monitoring]\n' +
            '  Monitoring --> Client[Qualit√© de service]\n' +
            '  Client --> Feedback[Feedback Produit]\n' +
            '  Feedback --> Stack'
          ),
          screenPlaceholder('Roadmap produit globale (vue marketing/produit)'),

          // Cheatsheet & Annexes pour r√©f√©rencer les d√©tails sans alourdir le corps du texte
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Cheatsheet ‚Äî Commandes utiles', bold: true })] }),
          ...textParagraphs(commandsCheatsheet),
          new Paragraph({ children: [new PageBreak()] }),
          // Annexes enrichissantes
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe A ‚Äî API Routes (inventaire)', bold: true })] }),
          ...textParagraphs(apiRoutes.map(r => `- ${r}`).join('\n')),
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe B ‚Äî Mod√®les Prisma', bold: true })] }),
          ...textParagraphs(prismaModels.map(m => `- ${m}`).join('\n')),
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe C ‚Äî Documentation existante (extraits)', bold: true })] }),
          ...textParagraphs(readme || ''),
          ...textParagraphs(appointmentDoc || ''),
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe D ‚Äî Extraits de configuration (Prometheus, Nginx, Docker Compose)', bold: true })] }),
          ...textParagraphs('Prometheus scrape (monitoring/prometheus/prometheus.yml):'),
          ...monoBlock(prometheusYml),
          ...textParagraphs('Nginx (nginx/nginx.conf) ‚Äì sections cl√©s proxy et WebSocket:'),
          ...monoBlock(readTextSafe(path.join(root, 'nginx', 'nginx.conf')).split('\n').slice(80, 170).join('\n')),
          ...textParagraphs('Docker Compose (docker-compose.prod.yml) ‚Äì services applicatifs:'),
          ...monoBlock(readTextSafe(path.join(root, 'docker-compose.prod.yml')).split('\n').slice(44, 200).join('\n')),
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe E ‚Äî Proc√©dures & Checklists op√©rateur', bold: true })] }),
          ...textParagraphs([
            'Checklist pr√©-d√©ploiement: variables d‚Äôenvironnement pr√©sentes, secrets valides, DB migr√©e, Stripe webhook configur√©, Nginx recharg√© sans erreur, monitoring OK.',
            'Runbook incident (paiements): v√©rifier Stripe status, logs webhook, retenter idempotent, notifier si SLA menac√©.',
            'Runbook incident (DB): v√©rifier connexions actives, lenteurs, index manquant; escalader si contention.',
            'Rollback: image pr√©c√©dente + migrations r√©versibles + smoke tests.',
          ].join('\n\n')),
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe F ‚Äî Screens √† capturer (guide)', bold: true })] }),
          ...textParagraphs([
            'Accueil local (http://localhost:3000), Prisma Studio (tables cl√©s), Stripe Dashboard (webhooks), Grafana: panels principaux, Prometheus: targets, Nginx: test SSL (qualys), Postman: collections d‚ÄôAPI, Pages cl√©s: login, profil, cr√©ation de post, messagerie.',
          ].join('\n')),
          new Paragraph({ heading: HeadingLevel.HEADING_1, children: [new TextRun({ text: 'Annexe G ‚Äî Glossaire', bold: true })] }),
          ...textParagraphs([
            'SLA: Accord de niveau de service ‚Äî objectif de disponibilit√©/latence.',
            'SLO: Objectif de niveau de service ‚Äî mesure chiffr√©e par m√©triques.',
            'Idempotence: m√™me requ√™te r√©p√©t√©e donne le m√™me r√©sultat (pas de double paiement).',
            'P95/P99: percentiles de latence; 95%/99% des requ√™tes sous ce seuil.',
          ].join('\n')),
        ],
      },
    ],
  })

  const outPath = path.join(docsDir, 'Inkspot_Technical_Manual.docx')
  const buffer = await Packer.toBuffer(doc)
  fs.writeFileSync(outPath, buffer)
  console.log('Manual generated at', outPath)
}

build().catch((err) => {
  console.error('Failed to generate manual:', err)
  process.exit(1)
})


